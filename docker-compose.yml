version: '4'

networks:
    datenetwork:
        driver: bridge

volumes:
  postgres-data:

services:
  nginx:
    build:
      context: ./
      dockerfile: ./nginx/Dockerfile
    ports:
      - '8080:80'
    networks:
      - datenetwork
    depends_on:
      - site
    volumes:
      - ./site/static:/src/static
    restart: always
  dateindb:
    image: postgres:14
    ports:
      - "5430:5432"
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_DB}
      POSTGRES_HOST: localhost
      PG_DATA: /var/lib/postgresql/data
    volumes:
      - ./postgres-data:/var/lib/postgresql
    networks:
      - datenetwork
    restart: always
  site:
    build: site
    environment:
      DB_DB: ${DB_DB}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      SECRET_KEY: ${SECRET_KEY}
    entrypoint: bash -c  "python manage.py collectstatic --noinput &&  python manage.py makemigrations && python manage.py migrate &&  gunicorn --bind 0.0.0.0:5000 datein.wsgi:application";
    depends_on:
      - dateindb
    networks:
      - datenetwork
    restart: always
    ports:
      - "8000:5000"
  redis:
    image: redis:latest
    restart: always
    networks:
      - datenetwork
  celery:
    build: site
    depends_on:
      - redis
      - site
    command: celery -A datein worker -l info
    networks:
      - datenetwork
  celerybeat:
    build: site
    depends_on:
      - redis
      - site
    command: celery -A datein beat -l info
    networks:
      - datenetwork
  telegram:
    build: tg
    depends_on:
      - site
      - dateindb
    command: python /src/main.py
    environment:
      DB_DB: ${DB_DB}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      TOKEN_TG: ${TOKEN_TG}
      TOKEN_VK: ${TOKEN_VK}
      API_TOKEN: ${API_TOKEN}
      VK_GROUP: ${VK_GROUP}
      TG_WEBHOOK_MODE: ${TG_WEBHOOK_MODE}
      TG_WEBHOOK_DOMAIN: ${TG_WEBHOOK_DOMAIN}
    networks:
      - datenetwork